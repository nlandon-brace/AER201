      list p=16f877                 ; list directive to define processor
      #include <p16f877.inc>        ; processor specific variable definitions
      __CONFIG _CP_OFF & _WDT_OFF & _BODEN_ON & _PWRTE_ON & _HS_OSC & _WRT_ENABLE_ON & _CPD_OFF & _LVP_OFF


    cblock  0x70
        COUNTH
        COUNTM
        COUNTL
        Table_Counter
        lcd_tmp
        lcd_d1
        lcd_d2
        com
        dat
        optime
        lights_total
        option_temp
        ledstat_1
        ledstat_2
        ledstat_3
        ledstat_4
        ledstat_5
        ledstat_6
        ledstat_7
        ledstat_8
        ledstat_9
        countdown
    endc

    ;Declare constants for pin assignments (LCD on PORTD)
        #define RS  PORTD,2
        #define E   PORTD,3

         ORG       0x0000     ;RESET vector must always be at 0x00
         goto      init       ;Just jump to the main code section.


;***************************************
; Delay: ~160us macro
;***************************************
LCD_DELAY macro
    movlw   0xFF
    movwf   lcd_d1
    decfsz  lcd_d1,f
    goto    $-1
    endm


;***************************************
; Display macro
;***************************************
Display macro   Message
        local   loop_
        local   end_
        clrf    Table_Counter
        clrw
loop_   movf    Table_Counter,W
        call    Message
        xorlw   B'00000000' ;check WORK reg to see if 0 is returned
        btfsc   STATUS,Z
            goto    end_
        call    WR_DATA
        incf    Table_Counter,F
        goto    loop_
end_
        endm

;***************************************
; Look up table
;***************************************

Welcome_Msg1
        addwf   PCL,F
        dt      "Welcome!", 0
Welcome_Msg2
        addwf   PCL,F
        dt      "Press * to Start",0

OpMessage
        addwf   PCL,F
        dt      "Checking...",0

Three
        addwf   PCL,F
        dt      "3",0
Two
        addwf   PCL,F
        dt      "2",0

One
        addwf   PCL,F
        dt      "1",0

End_Message1
        addwf   PCL,F
        dt      "DONE! A: Op. Time, B: # of Lights",0

End_Message2
        addwf   PCL, F
        dt      "C: Light Info, D: Return to Standby",0

Op_time1
        addwf   PCL,F
        dt      "90 seconds",0

Return_Message
        addwf   PCL,F
        dt      "D: Return",0

Lights_Tested
        addwf   PCL, F
        dt      " lights tested",0

Stats
        addwf   PCL, F
        dt      "Press a number for light info",0

LBintoNum
        addwf   PCL, F
        dt      "0123456789"

KPBintoNum
        addwf   PCL,F
        dt      "123 456 789"

ErrorTypes
        addwf   PCL, F
        dt      " - Pass,  - LED Fail,  - Flicker Fail, - N/A",0

;***************************************
; Initialize LCD
;***************************************
init
         clrf      INTCON         ; No interrupts

         bsf       STATUS,RP0     ; select bank 1
         clrf      TRISA          ; All port A is output
         movlw     b'11110010'    ; Set required keypad inputs
         movwf     TRISB
         clrf      TRISC          ; All port C is output
         clrf      TRISD          ; All port D is output

         bcf       STATUS,RP0     ; select bank 0
         clrf      PORTA
         clrf      PORTB
         clrf      PORTC
         clrf      PORTD

         call      InitLCD        ;Initialize the LCD (code in lcd.asm; imported by lcd.inc)

;***************************************
; Main code
;***************************************
STANDBY_DISPLAY
        call        ClrLCD
        Display     Welcome_Msg1    ;Display line 1 of the welcome message
        call        Switch_Lines    ; Switch lines
        Display     Welcome_Msg2    ; Display line 2 of the welcome message

test    
        btfss   PORTB,1             ; Check for input from the keypad
        goto    $-1     ; if no input, keep displaying the welcome message

        swapf   PORTB, W            ;When input is detected, read it in to W
        andlw   0x0F                ;Sample Code put this here...???
        xorlw   b'00001100'         ; Check to see if it is the 12th key (*)
        btfss   STATUS,Z            ; If status Z goes to 0, it is the 12th key, skip
        goto    STANDBY_DISPLAY     ; If it's not *, keep displaying the main message

        btfsc   PORTB,1             ;Wait for key to be released
        goto    $-1                 ;
        goto    STARTER

STARTER
        call    ClrLCD              ;Clear the LCD for the new message
        Display OpMessage           ;Display the operation message
        movlw   d'7'
        movwf   lights_total
       ;call    BEGIN_OPERATION     ;Call the operation

; Temporary countdown (while there is no operation)
COUNTDOWN
        call    HalfS
        call    HalfS
        call    ClrLCD
        Display Three
        call    HalfS
        call    HalfS
        call    ClrLCD
        Display Two
        call    HalfS
        call    HalfS
        call    ClrLCD
        Display One
        call    HalfS
        call    HalfS
        call    ClrLCD
;Temporary Countdown Ends

;Ending Menu Begins
ENDING
        call    ClrLCD  ;Clear the LCD to make space for the new message
        Display End_Message1    ;Display the first line of the end message
        call    Switch_Lines    ;Switch Lines
        Display End_Message2    ;Display the second line of the end message

END_DISPLAY                     ; Shifts the ending messages to the left
        movlw   b'00011000'
        call    WR_INS
        call    HalfS

        btfss   PORTB,1             ; Check for input from the keypad
        goto    END_DISPLAY         ; if no input, keep displaying the end message

        swapf   PORTB, W            ;When input is detected, read it in to W
        andlw   0x0F                ;Sample Code put this here...???
        goto    OPTIONA
        goto    END_DISPLAY
        
;        btfsc   PORTB,1             ;Wait for key to be released
;        goto    $-1                 ;

;        call    ClrLCD
        ;goto    $

OPTIONA
        movwf   option_temp
        xorlw   b'00000011'         ; Check to see if it is the 3rd key (A)
        btfss   STATUS,Z            ; If status Z goes to 0, it is the 3rd key, skip
        goto    OPTIONB         ; If not check if it's B
        call    ClrLCD              ; If it is, clear and display!

OPTIME
        Display Op_time1        ;Display time required for operation
        call    Switch_Lines
        Display Return_Message  ;D: Return

OPTIME_RETURN
        btfss   PORTB,1             ; Check for input from the keypad
        goto    $-1         ; if no input, keep displaying the message

        swapf   PORTB, W            ;When input is detected, read it in to W
        andlw   0x0F                
        xorlw   b'00001111'         ;Check to see if it's D
        btfss   STATUS, Z           ; If it's D skip
        goto    OPTIME_RETURN       ; If it's not D, wait.

        btfsc   PORTB,1             ;Wait for key to be released
        goto    $-1                 ;
        goto    ENDING



OPTIONB
        movf    option_temp, W
        xorlw   b'00000111'         ; Check to see if it is the 7th key (B)
        btfss   STATUS,Z            ; If status Z goes to 0, it is the 7th key, skip
        goto    OPTIONC         ; If not keep rotating
        call    ClrLCD              ; If it is, clear and display!

TESTED
        movf    lights_total, W
        call    LBintoNum
        call    WR_DATA
        Display Lights_Tested
        call    Switch_Lines
        Display Return_Message

TESTED_RETURN
        btfss   PORTB,1             ; Check for input from the keypad
        goto    $-1                 ; if no input, keep displaying the end message

        swapf   PORTB, W            ;When input is detected, read it in to W
        andlw   0x0F                ;Sample Code put this here...???
        xorlw   b'00001111'
        btfss   STATUS, Z
        goto    TESTED_RETURN

        btfsc   PORTB,1             ;Wait for key to be released
        goto    $-1                 ;
        goto    ENDING





OPTIONC
        movf    option_temp, W
        xorlw   b'0001011'         ; Check to see if it is the 11th key (C)
        btfss   STATUS,Z            ; If status Z goes to 0, it is the 11th key, skip
        goto    OPTIOND         ; If not keep rotating
        call    ClrLCD              ; If it is, clear and display!

LIGHTSTATS
        Display Stats
        call    Switch_Lines
        Display Return_Message

LIGHTSTATS_ROTATE
        movlw   b'00011000'
        call    WR_INS
        call    HalfS

LIGHTSTATS_RETURN
        btfss   PORTB,1             ; Check for input from the keypad
        goto    LIGHTSTATS_ROTATE   ; if no input, keep displaying the stats message

        swapf   PORTB, W            ;When input is detected, read it in to W
        andlw   0x0F                
        xorlw   b'00001111'         ; Check to see if D was pushed
        btfss   STATUS, Z
        goto    LIGHTSTATS_RETURN   ;If D is not pressed, wait for new input

        btfsc   PORTB,1             ;Wait for key to be released
        goto    $-1                 ;
        goto    ENDING              ; When key is released, return to Main Menu



OPTIOND
        movf    option_temp, W
        xorlw   b'00001111'
        btfss   STATUS, Z
        goto    END_DISPLAY
        goto    STANDBY_DISPLAY
;***************************************
; LCD control
;***************************************
Switch_Lines
        movlw   B'11000000'
        call    WR_INS
        return

Clear_Display
        movlw   B'00000001'
        call    WR_INS
        return

;***************************************
; Delay 0.5s
;***************************************
HalfS
    local   HalfS_0
      movlw 0x88
      movwf COUNTH
      movlw 0xBD
      movwf COUNTM
      movlw 0x03
      movwf COUNTL

HalfS_0
      decfsz COUNTH, f
      goto   $+2
      decfsz COUNTM, f
      goto   $+2
      decfsz COUNTL, f
      goto   HalfS_0

      goto $+1
      nop
      nop
        return


;******* LCD-related subroutines *******


    ;***********************************
InitLCD
    bcf STATUS,RP0
    bsf E     ;E default high

    ;Wait for LCD POR to finish (~15ms)
    call lcdLongDelay
    call lcdLongDelay
    call lcdLongDelay

    ;Ensure 8-bit mode first (no way to immediately guarantee 4-bit mode)
    ; -> Send b'0011' 3 times
    movlw   b'00110011'
    call    WR_INS
    call lcdLongDelay
    call lcdLongDelay
    movlw   b'00110010'
    call    WR_INS
    call lcdLongDelay
    call lcdLongDelay

    ; 4 bits, 2 lines, 5x7 dots
    movlw   b'00101000'
    call    WR_INS
    call lcdLongDelay
    call lcdLongDelay

    ; display on/off
    movlw   b'00001100'
    call    WR_INS
    call lcdLongDelay
    call lcdLongDelay

    ; Entry mode
    movlw   b'00000110'
    call    WR_INS
    call lcdLongDelay
    call lcdLongDelay

    ; Clear ram
    movlw   b'00000001'
    call    WR_INS
    call lcdLongDelay
    call lcdLongDelay
    return
    ;************************************

    ;ClrLCD: Clear the LCD display
ClrLCD
    movlw   B'00000001'
    call    WR_INS
    return

    ;****************************************
    ; Write command to LCD - Input : W , output : -
    ;****************************************
WR_INS
    bcf     RS              ;clear RS
    movwf   com             ;W --> com
    andlw   0xF0            ;mask 4 bits MSB w = X0
    movwf   PORTD           ;Send 4 bits MSB
    bsf     E               ;
    call    lcdLongDelay    ;__    __
    bcf     E               ;  |__|
    swapf   com,w
    andlw   0xF0            ;1111 0010
    movwf   PORTD           ;send 4 bits LSB
    bsf     E               ;
    call    lcdLongDelay    ;__    __
    bcf     E               ;  |__|
    call    lcdLongDelay
    return

    ;****************************************
    ; Write data to LCD - Input : W , output : -
    ;****************************************
WR_DATA
    bsf     RS
    movwf   dat
    movf    dat,w
    andlw   0xF0
    addlw   4
    movwf   PORTD
    bsf     E               ;
    call    lcdLongDelay    ;__    __
    bcf     E               ;  |__|
    swapf   dat,w
    andlw   0xF0
    addlw   4
    movwf   PORTD
    bsf     E               ;
    call    lcdLongDelay    ;__    __
    bcf     E               ;  |__|
    return

lcdLongDelay
    movlw d'20'
    movwf lcd_d2
LLD_LOOP
    LCD_DELAY
    decfsz lcd_d2,f
    goto LLD_LOOP
    return

    END



